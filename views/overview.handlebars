<div class="row">
  <div class="col"><h1>Overview of challenges</h1></div>
</div>
<div class="row my-4">
  <div id="challengelist" class="col"></div>
</div>


<script>
  function onLoadReady() {
    loadSettings();
    fetchAllChallenges();
  }

  

  function fetchAllChallenges() {
    // Load both the template and the context data concurrently using Promise.all
    Promise.all([
      fetchPartial('challenge-list'),
      fetchContextData('/api/lists/')
    ])
    .then(([templateSource, context]) => {

      // Compile the template with Handlebars
      const template = Handlebars.compile(templateSource);

      // Generate the HTML by applying the context to the template
      const html = template(context);

      // Insert the generated HTML into the DOM
      document.getElementById('challengelist').innerHTML = html;

      fetchChallenge(context[0].id);
    })
    .catch(error => {
      console.error('Error:', error);
    });      
  }

  function fetchChallenge(listname) {
    fetchAndRegisterPartial("challenge-description-card");

    // Load both the template and the context data concurrently using Promise.all
    Promise.all([
      fetchPartial('challenge-description'),
      fetchContextData('/api/lists/'+listname)
    ])
    .then(([templateSource, context]) => {

      // Compile the template with Handlebars
      const template = Handlebars.compile(templateSource);

      // Generate the HTML by applying the context to the template
      const html = template(context);

      // Insert the generated HTML into the DOM
      document.getElementById('challengeinformation-'+listname).innerHTML = html;
      drawCircleDiagram(listname, context.elements);
    })
    .catch(error => {
      console.error('Error:', error);
    });      
  }

    function drawCircleDiagram(listname, data){
      const ctx = document.getElementById("circleDiagram-"+listname).getContext('2d');
      Chart.getChart("circleDiagram-"+listname)?.destroy();

      new Chart(ctx, {
          type: 'pie',
          data: {
              labels: data.map(item => item.name),
              datasets: [{
                  data: data.map(item => item.weight),
                  backgroundColor: data.map(item => item.color),
              }]
          },
          options: {
              responsive: true,
              plugins: {
                  tooltip: {
                      enabled: true
                  },
                  legend: {
                    display: false
                  }
              }
          }
      });
    }

    // Display content when the page loads
    document.addEventListener('DOMContentLoaded', onLoadReady);
</script>