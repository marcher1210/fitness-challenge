<style type="text/css">
  .calendar-day {
      min-height: 100px;
      border: 1px solid #ddd;
      position: relative;
      padding: 20px 5px;
      opacity: 0.8
    }
    
    .calendar-row div:nth-last-of-type(1), 
    .calendar-row div:nth-last-of-type(2) {
      background-color: #EEE;
    }
    
    .calendar-day img {
      max-width: 80%;
      max-height: 60px;
      display: block;
      margin: 0 auto;
    }
    
    .calendar-day.calendar-day-today img {
      border: 1px solid #000;
    }
    
    .calendar-day.calendar-day-future {
      opacity: 0.3;
    }
    
    .calendar-day.calendar-day-today {
      opacity: 1;
      font-weight: bold;
    }
    
    .calendar-day .date {
      position: absolute;
      top: 5px;
      right: 5px;
      font-size: 0.85em;
    }
</style>

<div class="row">
  <h1>History</h1>
</div>
<div class="row">
  <div class="container-fluid" id="history-choosers"></div>
  <div class="container-fluid" id="history-calendar"></div>
</div>


<script type="text/javascript">
  function renderHistory(){

    fetchPartial('history-choosers')
    .then((templateSource) => {

      // Compile the template with Handlebars
      const template = Handlebars.compile(templateSource);

      // Generate the HTML by applying the context to the template
      const html = template({participants: globalSettings.participants, dayChoosers: [30, 90, 180, 365]});

      // Insert the generated HTML into the DOM
      document.getElementById('history-choosers').innerHTML = html;
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }

  function fetchHistory(){
    fetchAndRegisterPartial("calendar-day");

    let participant = globalSettings.participants[currentHistoryParticipantId];
  
    const todate = new Date();
    todate.setDate(todate.getDate()+(7-todate.getDay()));
    const fromdate = new Date();
    fromdate.setDate(fromdate.getDate() - currentHistoryDays);

    const apiUrl = '/api/lists/'+globalSettings.list+'/history?userseed='+participant+'&fromdate='+fromdate.toISOString().split('T')[0]+'&todate='+todate.toISOString().split('T')[0];

    // Load both the template and the context data concurrently using Promise.all
    Promise.all([
      fetchPartial('calendar-main'),
      fetchContextData(apiUrl)
    ])
    .then(([templateSource, data]) => {

      // Compile the template with Handlebars
      const template = Handlebars.compile(templateSource);

      // Calculate the data for the template
      const numBefore = data[0].date.weekdayNum;
      const numAfter = 6-data[data.length-1].date.weekdayNum;

      // Generate the HTML by applying the context to the template
      const html = template({before: [...Array(numBefore).keys()], days: data, after: [...Array(numAfter).keys()]});

      // Insert the generated HTML into the DOM
      document.getElementById('history-calendar').innerHTML = html;

      //Activate "participant" button
      let participantButtons = document.getElementsByClassName('history-participant-button');
      for (var i = 0; i < participantButtons.length; i++) {
        participantButtons[i].classList.remove("active");
      }
      document.getElementById('history-participant-button-'+currentHistoryParticipantId).classList.add("active");

              //Activate "days" button
      let daysButtons = document.getElementsByClassName('history-days-button');
      for (var i = 0; i < daysButtons.length; i++) {
        daysButtons[i].classList.remove("active");
      }
      document.getElementById('history-days-button-'+currentHistoryDays).classList.add("active");
    })
    .catch(error => {
      console.error('Error:', error);
    });  
  }

  function clickHistoryParticipant(participantId){
    currentHistoryParticipantId = participantId;
    fetchHistory();
  }

  function clickHistoryDays(days){
    currentHistoryDays = days;
    fetchHistory();
  }

  let currentHistoryParticipantId = 0, currentHistoryDays = 30;
  
  function loadMain(){ 
    loadSettings();
    renderHistory();
    fetchHistory();
  }

  // Display content when the page loads
  document.addEventListener('DOMContentLoaded', loadMain);
</script>